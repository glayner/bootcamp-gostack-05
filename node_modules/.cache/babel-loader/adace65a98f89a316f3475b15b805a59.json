{"ast":null,"code":"import _slicedToArray from \"/home/thiago/worckspace/GoStack/modulo05/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/home/thiago/worckspace/GoStack/modulo05/src/pages/Repository/index.js\";\nimport React, { Component } from 'react';\nimport { Link } from 'react-router-dom';\nimport PropTypes from 'prop-types';\nimport { FaSpinner } from 'react-icons/fa';\nimport api from '../../services/api';\nimport Container from '../../components/Container/index';\nimport { Loading, Owner, IssueList, IssuesFilter } from './styles';\n\nclass Repository extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      repository: {},\n      issues: [],\n      loading: true,\n      issueState: 'closed'\n    };\n  }\n\n  async componentDidMount() {\n    const match = this.props.match;\n    const is = localStorage.getItem('issueState');\n    console.log(JSON.parse(is));\n\n    if (is) {\n      this.setState({\n        issueState: JSON.parse(is)\n      });\n    } else {\n      this.setState({\n        issueState: 'all'\n      });\n    }\n\n    const issueState = this.state.issueState;\n    console.log(issueState);\n    const repoName = decodeURIComponent(match.params.repository);\n\n    const _ref = await Promise.all([api.get(\"/repos/\".concat(repoName)), api.get(\"/repos/\".concat(repoName, \"/issues\"), {\n      params: {\n        state: issueState,\n        per_page: 5\n      }\n    })]),\n          _ref2 = _slicedToArray(_ref, 2),\n          repository = _ref2[0],\n          issues = _ref2[1];\n\n    this.setState({\n      repository: repository.data,\n      issues: issues.data,\n      loading: false\n    });\n  }\n\n  componentDidUpdate(_, prevState) {\n    const issueState = this.state.issueState;\n\n    if (prevState.issueState !== issueState) {\n      localStorage.setItem('issueState', JSON.stringify(issueState));\n    }\n  }\n\n  handleSubmit(e) {\n    this.setState({\n      issueState: e\n    });\n  }\n\n  render() {\n    const _this$state = this.state,\n          repository = _this$state.repository,\n          issues = _this$state.issues,\n          loading = _this$state.loading;\n\n    if (loading) {\n      return React.createElement(Loading, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 65\n        },\n        __self: this\n      }, \"Carregando\", React.createElement(FaSpinner, {\n        color: \"#FFF\",\n        size: 30,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 67\n        },\n        __self: this\n      }));\n    }\n\n    return React.createElement(Container, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 73\n      },\n      __self: this\n    }, React.createElement(Owner, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 74\n      },\n      __self: this\n    }, React.createElement(Link, {\n      to: \"/\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 75\n      },\n      __self: this\n    }, \"Voltar aos reposit\\xF3rios\"), React.createElement(\"img\", {\n      src: repository.owner.avatar_url,\n      alt: repository.owner.login,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 76\n      },\n      __self: this\n    }), React.createElement(\"h1\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 77\n      },\n      __self: this\n    }, repository.name), React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 78\n      },\n      __self: this\n    }, repository.description)), React.createElement(IssuesFilter, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 80\n      },\n      __self: this\n    }, React.createElement(\"button\", {\n      type: \"submit\",\n      onClick: () => this.handleSubmit('all'),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 81\n      },\n      __self: this\n    }, \"All\"), React.createElement(\"button\", {\n      type: \"submit\",\n      onClick: () => this.handleSubmit('open'),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 84\n      },\n      __self: this\n    }, \"Open\"), React.createElement(\"button\", {\n      type: \"submit\",\n      onClick: () => this.handleSubmit('closed'),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 87\n      },\n      __self: this\n    }, \"Closed\")), React.createElement(IssueList, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 92\n      },\n      __self: this\n    }, issues.map(issue => React.createElement(\"li\", {\n      key: String(issue.id),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 94\n      },\n      __self: this\n    }, React.createElement(\"img\", {\n      src: issue.user.avatar_url,\n      alt: issue.user.login,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 95\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 96\n      },\n      __self: this\n    }, React.createElement(\"strong\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 97\n      },\n      __self: this\n    }, React.createElement(\"a\", {\n      href: issue.html_url,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 98\n      },\n      __self: this\n    }, issue.title), issue.labels.map(label => React.createElement(\"span\", {\n      key: String(label.id),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 100\n      },\n      __self: this\n    }, label.name))), React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 103\n      },\n      __self: this\n    }, issue.user.login))))));\n  }\n\n}\n\nRepository.propTypes = {\n  match: PropTypes.shape({\n    params: PropTypes.shape({\n      repository: PropTypes.string,\n      state: PropTypes.string\n    })\n  }).isRequired\n};\nexport default Repository;","map":{"version":3,"sources":["/home/thiago/worckspace/GoStack/modulo05/src/pages/Repository/index.js"],"names":["React","Component","Link","PropTypes","FaSpinner","api","Container","Loading","Owner","IssueList","IssuesFilter","Repository","state","repository","issues","loading","issueState","componentDidMount","match","props","is","localStorage","getItem","console","log","JSON","parse","setState","repoName","decodeURIComponent","params","Promise","all","get","per_page","data","componentDidUpdate","_","prevState","setItem","stringify","handleSubmit","e","render","owner","avatar_url","login","name","description","map","issue","String","id","user","html_url","title","labels","label","propTypes","shape","string","isRequired"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport { Link } from 'react-router-dom';\nimport PropTypes from 'prop-types';\nimport { FaSpinner } from 'react-icons/fa';\n\nimport api from '../../services/api';\nimport Container from '../../components/Container/index';\n\nimport { Loading, Owner, IssueList, IssuesFilter } from './styles';\n\nclass Repository extends Component {\n  state = {\n    repository: {},\n    issues: [],\n    loading: true,\n    issueState: 'closed',\n  };\n\n  async componentDidMount() {\n    const { match } = this.props;\n    const is = localStorage.getItem('issueState');\n    console.log(JSON.parse(is));\n    if (is) {\n      this.setState({ issueState: JSON.parse(is) });\n    } else {\n      this.setState({ issueState: 'all' });\n    }\n    const { issueState } = this.state;\n    console.log(issueState);\n\n    const repoName = decodeURIComponent(match.params.repository);\n    const [repository, issues] = await Promise.all([\n      api.get(`/repos/${repoName}`),\n      api.get(`/repos/${repoName}/issues`, {\n        params: {\n          state: issueState,\n          per_page: 5,\n        },\n      }),\n    ]);\n\n    this.setState({\n      repository: repository.data,\n      issues: issues.data,\n      loading: false,\n    });\n  }\n\n  componentDidUpdate(_, prevState) {\n    const { issueState } = this.state;\n    if (prevState.issueState !== issueState) {\n      localStorage.setItem('issueState', JSON.stringify(issueState));\n    }\n  }\n\n  handleSubmit(e) {\n    this.setState({ issueState: e });\n  }\n\n  render() {\n    const { repository, issues, loading } = this.state;\n\n    if (loading) {\n      return (\n        <Loading>\n          Carregando\n          <FaSpinner color=\"#FFF\" size={30} />\n        </Loading>\n      );\n    }\n\n    return (\n      <Container>\n        <Owner>\n          <Link to=\"/\">Voltar aos repositórios</Link>\n          <img src={repository.owner.avatar_url} alt={repository.owner.login} />\n          <h1>{repository.name}</h1>\n          <p>{repository.description}</p>\n        </Owner>\n        <IssuesFilter>\n          <button type=\"submit\" onClick={() => this.handleSubmit('all')}>\n            All\n          </button>\n          <button type=\"submit\" onClick={() => this.handleSubmit('open')}>\n            Open\n          </button>\n          <button type=\"submit\" onClick={() => this.handleSubmit('closed')}>\n            Closed\n          </button>\n        </IssuesFilter>\n\n        <IssueList>\n          {issues.map(issue => (\n            <li key={String(issue.id)}>\n              <img src={issue.user.avatar_url} alt={issue.user.login} />\n              <div>\n                <strong>\n                  <a href={issue.html_url}>{issue.title}</a>\n                  {issue.labels.map(label => (\n                    <span key={String(label.id)}>{label.name}</span>\n                  ))}\n                </strong>\n                <p>{issue.user.login}</p>\n              </div>\n            </li>\n          ))}\n        </IssueList>\n      </Container>\n    );\n  }\n}\n\nRepository.propTypes = {\n  match: PropTypes.shape({\n    params: PropTypes.shape({\n      repository: PropTypes.string,\n      state: PropTypes.string,\n    }),\n  }).isRequired,\n};\n\nexport default Repository;\n"]},"metadata":{},"sourceType":"module"}